{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Activity Tracker \u00b6 A reusable Django application to track user actions through the database. Documentation: https://William-Fernandes252.github.io/django-activity-tracker GitHub: https://github.com/William-Fernandes252/django-activity-tracker PyPI: https://pypi.org/project/django-activity-tracker/ Free software: MIT Introduction \u00b6 I once worked on a project where user interactions about business entities needed to be recorded, in a detailed and consistent manner, in the database for auditing reasons. When a user changed the state of an object, the change, along with its author and time, should be saved. Furthermore, the object in question should be easily located. As I came up with a conveniently generic solution, I decided to turn this into a reusable application for Django projects. Currently it works only in Django REST Framework projects, and with ModelViewSet s , but in the future I plan to support Django CBVs and view functions as well. Features \u00b6 Track users interations with any model of your project in a generic way; Retrive and protect this information; Use the full capabilities of the Django ORM to gather information about what a specific user did to an object, what users interacted with it, and more! Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#django-activity-tracker","text":"A reusable Django application to track user actions through the database. Documentation: https://William-Fernandes252.github.io/django-activity-tracker GitHub: https://github.com/William-Fernandes252/django-activity-tracker PyPI: https://pypi.org/project/django-activity-tracker/ Free software: MIT","title":"Django Activity Tracker"},{"location":"#introduction","text":"I once worked on a project where user interactions about business entities needed to be recorded, in a detailed and consistent manner, in the database for auditing reasons. When a user changed the state of an object, the change, along with its author and time, should be saved. Furthermore, the object in question should be easily located. As I came up with a conveniently generic solution, I decided to turn this into a reusable application for Django projects. Currently it works only in Django REST Framework projects, and with ModelViewSet s , but in the future I plan to support Django CBVs and view functions as well.","title":"Introduction"},{"location":"#features","text":"Track users interations with any model of your project in a generic way; Retrive and protect this information; Use the full capabilities of the Django ORM to gather information about what a specific user did to an object, what users interacted with it, and more!","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Models \u00b6 This is the current representation for a user action class ActivityLog(models.Model): user = models.ForeignKey( get_user_model(), on_delete=models.CASCADE, related_name=\"actions\" ) type = models.ForeignKey(ActivityLogType, on_delete=models.PROTECT) status = models.CharField(max_length=2, choices=StatusChoices.choices) description = models.TextField() timestamp = models.DateTimeField(auto_now_add=True) content_type = models.ForeignKey(ContentType, on_delete=models.PROTECT) object_id = models.PositiveIntegerField(null=True) content_object = GenericForeignKey() Views \u00b6 In order to read the activity logs of your application, add the app urls to your root url configuration urlpatterns = [ ..., path(\"\", include(\"django_activity_tracker.urls\")), ... ] Or access the admin site, which now contains a table showing the logs. There you can filter the actions by user, status, target object and type, and sort by timestamp.","title":"Modules"},{"location":"api/#models","text":"This is the current representation for a user action class ActivityLog(models.Model): user = models.ForeignKey( get_user_model(), on_delete=models.CASCADE, related_name=\"actions\" ) type = models.ForeignKey(ActivityLogType, on_delete=models.PROTECT) status = models.CharField(max_length=2, choices=StatusChoices.choices) description = models.TextField() timestamp = models.DateTimeField(auto_now_add=True) content_type = models.ForeignKey(ContentType, on_delete=models.PROTECT) object_id = models.PositiveIntegerField(null=True) content_object = GenericForeignKey()","title":"Models"},{"location":"api/#views","text":"In order to read the activity logs of your application, add the app urls to your root url configuration urlpatterns = [ ..., path(\"\", include(\"django_activity_tracker.urls\")), ... ] Or access the admin site, which now contains a table showing the logs. There you can filter the actions by user, status, target object and type, and sort by timestamp.","title":"Views"},{"location":"changelog/","text":"Changelog \u00b6 [1.0.1] - 2023-11-12 \u00b6 Fix styles and code formatting. [1.0.0] - 2023-11-11 \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#101---2023-11-12","text":"Fix styles and code formatting.","title":"[1.0.1] - 2023-11-12"},{"location":"changelog/#100---2023-11-11","text":"First release on PyPI.","title":"[1.0.0] - 2023-11-11"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/William-Fernandes252/django-activity-tracker/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting (like the database manager and configuration, for instance). Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Django Activity Tracker could always use more documentation, whether as part of the official Django Activity Tracker docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/William-Fernandes252/django-activity-tracker/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome! Get Started! \u00b6 Ready to contribute? Here's how to set up django-activity-tracker for local development. Fork the django-activity-tracker repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/django-activity-tracker.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/William-Fernandes252/django-activity-tracker/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ python runtests.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/William-Fernandes252/django-activity-tracker/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting (like the database manager and configuration, for instance). Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Django Activity Tracker could always use more documentation, whether as part of the official Django Activity Tracker docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/William-Fernandes252/django-activity-tracker/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome!","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up django-activity-tracker for local development. Fork the django-activity-tracker repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/django-activity-tracker.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/William-Fernandes252/django-activity-tracker/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ python runtests.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Django Activity Tracker, run this command in your terminal: $ pip install django-activity-tracker This is the preferred method to install Django Activity Tracker, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Django Activity Tracker can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/William-Fernandes252/django-activity-tracker Or download the tarball : $ curl -OJL https://github.com/William-Fernandes252/django-activity-tracker/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Django Activity Tracker, run this command in your terminal: $ pip install django-activity-tracker This is the preferred method to install Django Activity Tracker, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Django Activity Tracker can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/William-Fernandes252/django-activity-tracker Or download the tarball : $ curl -OJL https://github.com/William-Fernandes252/django-activity-tracker/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Django Activity Tracker in a project include it in your INSTALLED_APPS INSTALLED_APPS = [ ..., \"django_activity_tracker\", ... ] make the migrations to create the app models python manage.py makemigrations execute the migrations python manage.py migrate Now, in order to track the users interations with one of your models Inherit from django_activity_tracker.models.ActivityAwareModel class YourModel(ActivityAwareModel): ... Use the django_activity_tracker.views.ActivityAwareAPIView in the viewset of your model from rest_framework.viewsets import ModelViewSet class YourModelViewSet(ActivityAwareAPIView, ModelViewSet): ... Implement the method get_action_type(self, request) in the viewset from rest_framework.viewsets import ModelViewSet class YourModelViewSet(ActivityAwareAPIView, ModelViewSet): def get_action_type(self, request): return ActivityType.objects.get_or_create( name=f\"{request.method} {request.path}\", label=f\"{request.method.tolower()}\" )[0] This method is responsible to determine the meaning of the users actions through the viewset. It must have a name, and a label. Now the users actions in any instance of your model can be queried through their actions attribute (its a GenericRelation field).","title":"Usage"},{"location":"usage/#usage","text":"To use Django Activity Tracker in a project include it in your INSTALLED_APPS INSTALLED_APPS = [ ..., \"django_activity_tracker\", ... ] make the migrations to create the app models python manage.py makemigrations execute the migrations python manage.py migrate Now, in order to track the users interations with one of your models Inherit from django_activity_tracker.models.ActivityAwareModel class YourModel(ActivityAwareModel): ... Use the django_activity_tracker.views.ActivityAwareAPIView in the viewset of your model from rest_framework.viewsets import ModelViewSet class YourModelViewSet(ActivityAwareAPIView, ModelViewSet): ... Implement the method get_action_type(self, request) in the viewset from rest_framework.viewsets import ModelViewSet class YourModelViewSet(ActivityAwareAPIView, ModelViewSet): def get_action_type(self, request): return ActivityType.objects.get_or_create( name=f\"{request.method} {request.path}\", label=f\"{request.method.tolower()}\" )[0] This method is responsible to determine the meaning of the users actions through the viewset. It must have a name, and a label. Now the users actions in any instance of your model can be queried through their actions attribute (its a GenericRelation field).","title":"Usage"}]}